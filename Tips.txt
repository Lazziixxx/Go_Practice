/********************************************************************************************/
Go语言格式化输出动词：
动词	功能
%v	按值本身的格式输出，万能动词，不知道用什么动词就用它
%+v	同%v，但输出结构体时会添加字段名
%#v	输出值得Go语法表示
%t	格式化bool值
%b	按二进制输出
%c	输出整数对应的Unicode字符
%d	按十进制输出
%o	按八进制输出
%O	按八进制输出，并添加0o前缀
%x	按十六进制输出，字母小写，%x还能用来格式化字符串和[]byte类型，每个字节用两位十六进制表示，字母小写
%X	按十六进制输出，字母大写，%X还能用来格式化字符串和[]byte类型，每个字节用两位十六进制表示，字母小写
%U	按Unicode格式输出
%e	按科学计数法表示输出，字母小写
%E	按科学计数法表示输出，字母大写
%f	输出浮点数
%F	同%f
%g	漂亮的格式化浮点数
%G	同%G
%s	格式化为字符串
%q	格式化为字符串，并在两端添加双引号
%p	格式化指针
%T	输出变量类型
%w	专用于fmt.Errorf包装error
/********************************************************************************************/
（1）func Seed(seed int64)
设置随机种子，不设置则默认Seed(1);常用rand.Seed(time.Now().UnixNano())
（2）func Int() int
返回一个非负的伪随机int值
（3）func Int31() int32
返回一个int32类型的非负的31位伪随机数
（4）func Int63() int64
返回一个int64类型的非负的63位伪随机数
（5）func Intn(n int) int
返回一个取值范围在[0,n)的伪随机int值，如果n<=0会panic
/********************************************************************************************/
strconv.Itoa()函数的参数是一个整型数字，它可以将数字转换成对应的字符串类型的数字

func main() {
	string_number := 97
	result := strconv.Itoa(string_number)
 
	fmt.Println(result)
	fmt.Printf("%T\n", result)
}
输出：
97 
string

strconv包提供了简单数据类型之间的类型转换功能。可以将简单类型转换为字符串，也可以将字符串转换为其它简单类型。

这个包里提供了很多函数，大概分为几类：

字符串转int：Atoi()
int转字符串: Itoa()
ParseTP类函数将string转换为TP类型：ParseBool()、ParseFloat()、ParseInt()、ParseUint()。因为string转其它类型可能会失败，所以这些函数都有第二个返回值表示是否转换成功
其它类型转string类型：FormatBool()、FormatFloat()、FormatInt()、FormatUint()
AppendTP类函数用于将TP转换成字符串后append到一个slice中：AppendBool()、AppendFloat()、AppendInt()、AppendUint()

string函数的参数若是一个整型数字，它将该整型数字转换成ASCII码值等于该整形数字的字符
func main() {
	string_number := 97
	result := string(string_number)
	fmt.Println(result)
	fmt.Printf("%T\n", result)
}
输出：
a 
string
/********************************************************************************************/
go func(id int) {
/*id == value*/
}(value)

func main() {
    for i := 0; i < 100; i++ {
        go func() {
            fmt.Println(i)
        }()
    }
} 
输出：
100
...
...
100

func main() {
    for i := 0; i < 100; i++ {
        go func(i int) {
            fmt.Println(i)
        }(i)
    }
}
输出：
1
2
...
99

type Per struct {
    name string
    bh   int
}

func main() {
    p := &Per{}
    for i := 0; i < 100; i++ {
        p.bh = i
        go func(p *Per) {
            fmt.Println(p)
        }(p)
    }
}
输出：
&{99}
&{99}
...
&{99}
/********************************************************************************************/
